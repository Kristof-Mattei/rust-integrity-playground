name: dump-json-output

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

# Controls when the workflow will run
on:
  # Triggers the workflow pushes to main, which by control in GitHub should only be PR merges
  pull_request:
    branches: [main]

permissions:
  packages: read

jobs:
  retag-containers:
    name: Retag the containers
    runs-on: ubuntu-latest
    steps:
      - name: Set up Crane volume and define env variables
        shell: bash
        run: |

          CRANE_DOCKER_CONFIG_VOLUME="crane_docker_config"
          docker volume create ${CRANE_DOCKER_CONFIG_VOLUME};

          # for security purposes let's create a volume for .docker in crane
          CRANE_DOCKER_CONFIG_LOCATION="/${CRANE_DOCKER_CONFIG_VOLUME}"

          # generalize the mount config
          CRANE_DOCKER_CONFIG_VOLUME_MOUNT="type=volume,src=${CRANE_DOCKER_CONFIG_VOLUME},dst=${CRANE_DOCKER_CONFIG_LOCATION}"

          echo "CRANE_DOCKER_CONFIG_VOLUME=${CRANE_DOCKER_CONFIG_VOLUME}" >> ${GITHUB_ENV}
          echo "CRANE_DOCKER_CONFIG_LOCATION=${CRANE_DOCKER_CONFIG_LOCATION}" >> ${GITHUB_ENV}
          echo "CRANE_DOCKER_CONFIG_VOLUME_MOUNT=${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" >> ${GITHUB_ENV}

          # prepare the volume so that crane can write to is
          # note that the ${} passed in via sh are rendered before we run the container
          # so it just gets an actual string
          docker run \
            --mount "${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" \
            --rm \
            alpine:latest \
            sh -c "chmod 700 ${CRANE_DOCKER_CONFIG_LOCATION} && chown 65532:65532 ${CRANE_DOCKER_CONFIG_LOCATION}"

      - name: Set full image name
        uses: actions/github-script@v5
        with:
          script: |

            const { REGISTRY, IMAGE_NAME } = process.env;

            const full_image_name = `${REGISTRY.toLowerCase()}/${IMAGE_NAME.toLowerCase()}`;

            core.exportVariable("FULL_IMAGE_NAME", full_image_name);

      - name: Crane login
        uses: actions/github-script@v5
        with:
          script: |
            const options = {};


            const options = {};
            options.listeners = {
              debug: (data) => {
                console.log(data);
              },
            };
            const { CRANE_DOCKER_CONFIG_LOCATION, CRANE_DOCKER_CONFIG_VOLUME_MOUNT, REGISTRY } = process.env;

            await exec.exec("docker", [`run --env DOCKER_CONFIG="${CRANE_DOCKER_CONFIG_LOCATION}"`,
                                  `--mount ${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}`,
                                  "--rm",
                                  "gcr.io/go-containerregistry/crane:latest",
                                  `auth login ${REGISTRY} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}`]);

      - name: Find all tags for ${{ env.FULL_IMAGE_NAME }}
        uses: actions/github-script@v5
        id: find-existing-tags
        with:
          script: |

            const options = {};

            const tag = [];

            const options = {};
            options.listeners = {
              stdout: (data: Buffer) => {
                data.toString().split("\n").forEach(tags.push);
              },
            };

            const { CRANE_DOCKER_CONFIG_LOCATION, CRANE_DOCKER_CONFIG_VOLUME_MOUNT, REGISTRY, FULL_IMAGE_NAME } = process.env;

            await exec.exec("docker", ["run",
                                  `--env DOCKER_CONFIG="${CRANE_DOCKER_CONFIG_LOCATION}"`,
                                  `--mount ${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}`,
                                  "--rm",
                                  "gcr.io/go-containerregistry/crane:latest",

            core.setOutput("tags", full_image_name);


      - shell: bash
        run: |
          echo "${{ fromJSON(steps.find-existing-tags.outputs.tags) }}"

      - name: Contains PR-31
        shell: bash
        if: ${{ contains(fromJSON(steps.find-existing-tags.outputs.tags), 'pr-31') }}
        run: |

          echo "Should print"

      - shell: bash
        if: ${{ contains(fromJSON(steps.find-existing-tags.outputs.tags), 'pr-33333333331') }}
        run: |

          echo "Shouldn't print"
