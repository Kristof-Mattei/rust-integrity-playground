name: CI & PR

on:
  pull_request:
    branches:
      - main
  # I need to find out a way to kill the push triggered event when there's a matching pull_request trigger
  # push:
  #   branches-ignore:
  #     - main
env:
  CARGO_TERM_COLOR: always
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: pr-${{ github.event.number }} # ${{ github.head_ref }}${{ github.ref }} <- when we expand to non-PRs
  cancel-in-progress: true

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      # code: ${{ steps.filter.outputs.code }}
      code: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: ./.github/actions/dorny/paths-filter # since this is a submodule, it depends on which version is pinned
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            code:
              - "src/*"
              - "src/**/*"
              - "TAG"
              - "*.toml"
              - Dockerfile
              - "tests/*"
              - "tests/**/*"

  cargo-build:
    name: Cargo build
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      (needs.changes.outputs.code == 'true')

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up toolchain
        uses: ./.github/actions/actions-rs/toolchain # since this is a submodule, it depends on which version is pinned
        with:
          profile: minimal
          toolchain: stable
          override: true

      # TODO cache
      # $HOME/.cargo/registry
      # and
      # our current directory + /target
      # to speed up compilation

      - name: Test
        uses: ./.github/actions/actions-rs/cargo
        with:
          command: test
          args: --verbose

  cargo-fmt:
    name: Check formatting
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      (needs.changes.outputs.code == 'true')
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up toolchain
        uses: ./.github/actions/actions-rs/toolchain # since this is a submodule, it depends on which version is pinned
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: Fmt
        uses: ./.github/actions/actions-rs/cargo
        with:
          command: fmt
          args: --all -- --check

  cargo-test-and-report:
    name: Cargo test and report
    env:
      PROJECT_NAME_UNDERSCORE: rust_integrity_playground
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: -Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort
      RUSTDOCFLAGS: -Cpanic=abort
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up toolchain
        uses: ./.github/actions/actions-rs/toolchain
        with:
          profile: minimal
          toolchain: stable
          override: true

      # - name: Cache dependencies
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: cache-dependencies
      #   with:
      #     path: |
      #       ~/.cargo/.crates.toml
      #       ~/.cargo/.crates2.json
      #       ~/.cargo/bin
      #       ~/.cargo/registry/index
      #       ~/.cargo/registry/cache
      #       target
      #     # figure out right cache-name here. Definitely shouldn't be a lowercase name
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}

      - name: Generate test result and coverage report
        run: |
          cargo install cargo2junit grcov rust-covfix;
          cargo test --features coverage ${CARGO_OPTIONS} -- -Z unstable-options --format json | cargo2junit > results.xml;
          zip -0 ccov.zip `find . \( -name "$PROJECT_NAME_UNDERSCORE*.gc*" \) -print`;
          grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore "/*" --ignore "tests/*" -o lcov.info;
          rust-covfix -o lcov_correct.info lcov.info;

      - name: Upload test results
        if: ${{ always() }}
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          check_name: Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: results.xml

      # - name: Upload to CodeCov
      #   if: ${{ always() }}
      #   uses: codecov/codecov-action@v1
      #   with:
      #     # required for private repositories:
      #     # token: ${{ secrets.CODECOV_TOKEN }}
      #     files: ./lcov_correct.info
      #     fail_ci_if_error: true

  cargo-clippy-and-report:
    name: Run Clippy
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      (needs.changes.outputs.code == 'true')
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up toolchain
        uses: ./.github/actions/actions-rs/toolchain
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy

      # we may want to remove this if clippy-check also reports to the
      # logs in GitHub actions
      - name: Clippy
        uses: ./.github/actions/actions-rs/cargo
        with:
          command: clippy
          args: --all-targets --all-features -- -D warnings

      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features -- -D warnings
          name: Clippy report

  publish:
    name: Build docker container and publish
    needs:
      - cargo-build
      - cargo-fmt
      - cargo-test-and-report
      - cargo-clippy-and-report
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # TODO validate no changes between github.pull_request.head.sha and the actual current sha (representing the hypothetical merge)

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=edge
            type=ref,event=branch
            type=ref,event=pr

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          # push the created docker image when it's the tip of a PR
          # this container is THE artifact, and we will re-tag it
          # once the PR has been accepted
          push: |
            (github.repository == 'Kristof-Mattei/rust-integrity-playground')
            && (github.event_name == 'pull_request')
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
