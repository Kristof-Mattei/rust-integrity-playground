name: CI & PR

on:
  pull_request:
    branches:
      - main
  # I need to find out a way to kill the push triggered event when there's a matching pull_request trigger
  # push:
  #   branches-ignore:
  #     - main
env:
  CARGO_TERM_COLOR: always
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: pr-${{ github.event.number }} # ${{ github.head_ref }}${{ github.ref }} <- when we expand to non-PRs
  cancel-in-progress: true

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      # code: ${{ steps.filter.outputs.code }}
      code: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - uses: ./.github/actions/dorny/paths-filter # since this is a submodule, it depends on which version is pinned
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: .github/file-filters.yml

  # cargo-build:
  #   name: Cargo build
  #   runs-on: ubuntu-latest
  #   needs:
  #     - changes
  #   if: |
  #     (needs.changes.outputs.code == 'true')

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: true

  #     - name: Set up toolchain
  #       uses: ./.github/actions/actions-rs/toolchain # since this is a submodule, it depends on which version is pinned
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true

  #     - name: Cache dependencies
  #       uses: actions/cache@v2
  #       env:
  #         CACHE_NAME: cargo-cache-dependencies
  #       with:
  #         path: |
  #           ~/.cargo/.crates.toml
  #           ~/.cargo/.crates2.json
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target
  #         key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cargobuild
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
  #           ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

  #     - name: Build
  #       uses: ./.github/actions/actions-rs/cargo
  #       with:
  #         command: build
  #         args: --verbose

  # cargo-fmt:
  #   name: Check formatting
  #   runs-on: ubuntu-latest
  #   needs:
  #     - changes
  #   if: |
  #     (needs.changes.outputs.code == 'true')
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: true

  #     - name: Set up toolchain
  #       uses: ./.github/actions/actions-rs/toolchain # since this is a submodule, it depends on which version is pinned
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true
  #         components: rustfmt

  #     - name: Cache dependencies
  #       uses: actions/cache@v2
  #       env:
  #         CACHE_NAME: cargo-cache-dependencies
  #       with:
  #         path: |
  #           ~/.cargo/.crates.toml
  #           ~/.cargo/.crates2.json
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target
  #         key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cargofmt
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
  #           ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

  #     - name: Fmt
  #       uses: ./.github/actions/actions-rs/cargo
  #       with:
  #         command: fmt
  #         args: --all -- --check

  # cargo-test-and-report:
  #   name: Cargo test and report
  #   env:
  #     PROJECT_NAME_UNDERSCORE: rust_integrity_playground
  #     CARGO_INCREMENTAL: 0
  #     RUSTFLAGS: -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests -Zprofile
  #     RUSTDOCFLAGS: "-Cpanic=abort"
  #   runs-on: ubuntu-latest
  #   needs:
  #     - changes
  #   if: |
  #     (needs.changes.outputs.code == 'true')
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: true

  #     - name: Set up toolchain
  #       uses: ./.github/actions/actions-rs/toolchain
  #       with:
  #         profile: minimal
  #         toolchain: nightly
  #         override: true

  #     - name: Cache dependencies
  #       uses: actions/cache@v2
  #       env:
  #         CACHE_NAME: cargo-cache-dependencies
  #       with:
  #         path: |
  #           ~/.cargo/.crates.toml
  #           ~/.cargo/.crates2.json
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target
  #         key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cargotest
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
  #           ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

  #     - name: Generate test result and coverage report
  #       run: |
  #         cargo install cargo2junit grcov;
  #         cargo test ${CARGO_OPTIONS} -- -Z unstable-options --format json | cargo2junit > results.xml;
  #         zip -0 ccov.zip `find . \( -name "${PROJECT_NAME_UNDERSCORE}*.gc*" \) -print`;
  #         grcov ccov.zip -s . -t lcov --llvm --ignore-not-existing --ignore "/*" --ignore "tests/*" -o lcov.info;

  #     - name: Upload test results
  #       if: ${{ always() }}
  #       uses: ./.github/actions/EnricoMi/publish-unit-test-result-action/composite
  #       with:
  #         check_name: Test Results
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         files: results.xml

  #     # - name: Upload to CodeCov
  #     #   if: ${{ always() }}
  #     #   uses: codecov/codecov-action@v1
  #     #   with:
  #         # required for private repositories:
  #         # token: ${{ secrets.CODECOV_TOKEN }}
  #         # files: ./lcov.info
  #         # fail_ci_if_error: true


  # cargo-clippy-and-report:
  #   name: Run Clippy
  #   runs-on: ubuntu-latest
  #   needs:
  #     - changes
  #   if: |
  #     (needs.changes.outputs.code == 'true')
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: true

  #     - name: Set up toolchain
  #       uses: ./.github/actions/actions-rs/toolchain
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true
  #         components: clippy

  #     - name: Cache dependencies
  #       uses: actions/cache@v2
  #       env:
  #         CACHE_NAME: cargo-cache-dependencies
  #       with:
  #         path: |
  #           ~/.cargo/.crates.toml
  #           ~/.cargo/.crates2.json
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target
  #         key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cargoclippy
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
  #           ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

  #     - name: Clippy
  #       uses: ./.github/actions/actions-rs/cargo
  #       with:
  #         command: clippy
  #         args: --all-targets --all-features -- -D warnings

  #     - uses: actions-rs/clippy-check@v1
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         args: --all-targets --all-features -- -D warnings
  #         name: Clippy report

  # publish:
  #   name: Build docker container and publish
  #   # needs:
  #   #   - cargo-build
  #   #   - cargo-fmt
  #   #   - cargo-test-and-report
  #   #   - cargo-clippy-and-report
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Set up Docker Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Log into registry ${{ env.REGISTRY }}
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     # TODO validate no changes between github.pull_request.head.sha and the actual current sha (representing the hypothetical merge)

  #     # Extract metadata (tags, labels) for Docker
  #     # https://github.com/docker/metadata-action
  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v3
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         tags: |
  #           type=edge
  #           type=ref,event=branch
  #           type=ref,event=pr

  #     - name: Cache Docker layers
  #       uses: actions/cache@v2
  #       env:
  #         CACHE_NAME: docker-cache-dependencies
  #       with:
  #         path: /tmp/.buildx-cache
  #         key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Dockerfile') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         # push the created docker image when it's the tip of a PR
  #         # this container is THE artifact, and we will re-tag it
  #         # once the PR has been accepted
  #         push: ${{ (github.repository == 'Kristof-Mattei/rust-integrity-playground') && (github.event_name == 'pull_request')  }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=local,src=/tmp/.buildx-cache
  #         cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

  #       # Temp fix
  #       # https://github.com/docker/build-push-action/issues/252
  #       # https://github.com/moby/buildkit/issues/1896
  #     - name: Move cache
  #       run: |
  #         rm -rf /tmp/.buildx-cache
  #         mv /tmp/.buildx-cache-new /tmp/.buildx-cache
