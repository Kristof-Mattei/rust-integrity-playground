name: Promote container

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

# Controls when the workflow will run
on:
  # Triggers the workflow pushes to main, which by control in GitHub should only be PR merges
  pull_request:
    branches: [ main ]
    types: [ closed ]
  push:
    branches: [ main ] # debug
    tags:
      - "v**"

  # I don't think we need this
  # workflow_dispatch:

jobs:
  collect-previous-tag:
    name: Collect previous tag
    runs-on: ubuntu-latest
    # outputs:
    #   previous-tag: |
    #     ${{  }}

    steps:
     - name: Checkout
       uses: actions/checkout@v2
       with:
         submodules: true

     - uses: ./.github/actions/dorny/paths-filter # since this is a submodule, it depends on which version is pinned
       if: ${{ github.event_name == 'pull_request' }}
       id: filter
       with:
         token: ${{ secrets.GITHUB_TOKEN }}
         filters: .github/file-filters.yml

     - name: Eh?
       shell: bash
       run: |
         echo "${{ toJson(steps.filter) }}"

  # tag_added:
  #   name: Add tag to Docker container
  #   if: ${{ github.ref == 'tag' }}
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write

  #   steps:
  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v3
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         tags: |
  #           type=edge
  #           type=sha,prefix=sha-,format=long
  #           type=ref,event=branch
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}


  # tag-incoming-pr-or-tag:
  #   name: "Add or retag the Docker container."
  #   # TODO figure out how we can also trigger this on a tag
  #   # if: ${{ github.event.pull_request.merged }}
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write

  #   env:
  #     CRANE_DOCKER_CONFIG_VOLUME: "crane_docker_config"

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: true

  #     - uses: ./.github/actions/dorny/paths-filter # since this is a submodule, it depends on which version is pinned
  #       if: ${{ github.event_name == 'pull_request' }}
  #       id: filter
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         filters: .github/file-filters.yml



  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v3
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         tags: |
  #           type=edge
  #           type=raw,value=latest
  #           type=sha,prefix=sha-,format=long
  #           type=ref,event=branch
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}

  #     - name: Add additional tags to image, since we accepted it as part of our main codebase
  #       shell: bash
  #       env:
  #         TAGS: ${{ join(fromJSON(steps.meta.outputs.json).tags, ',') }}
  #         PR_RUN_NUMBER: ${{ github.event.number }}
  #       run: |
  #         # create new image <name>
  #         # the ,, means tolowercase. See https://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion
  #         full_image_name="${REGISTRY,,}/${IMAGE_NAME,,}"

  #         incoming_tag="pr-${PR_RUN_NUMBER}"

  #         incoming_image_with_tag="${full_image_name}:${incoming_tag}"

  #         # Parse the tags
  #         IFS=',' read -ra tags <<< "${TAGS}"

  #         # for security purposes I'm creating a volume for .docker in crane
  #         # but I need to make sure that volume has the right permissions
  #         # so we do a fixup with alpine
  #         crane_docker_config_location="/${{ env.CRANE_DOCKER_CONFIG_VOLUME }}"

  #         docker volume create ${{ env.CRANE_DOCKER_CONFIG_VOLUME }};

  #         crane_docker_config_volume_mount="type=volume,src=${{ env.CRANE_DOCKER_CONFIG_VOLUME }},dst=${crane_docker_config_location}"

  #         # note that the ${} passed in via sh are rendered before we run the container
  #         # so it just gets an actual string
  #         docker run \
  #           --mount "${crane_docker_config_volume_mount}" \
  #           --rm \
  #           alpine:latest \
  #           sh -c "chmod 700 ${crane_docker_config_location} && chown 65532:65532 ${crane_docker_config_location}"

  #         docker run \
  #           --env DOCKER_CONFIG=${crane_docker_config_location} \
  #           --mount "${crane_docker_config_volume_mount}" \
  #           --rm \
  #           gcr.io/go-containerregistry/crane:latest \
  #           auth login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

  #         echo "Adding the following tags: ${TAGS}"

  #         # Parse the tags
  #         IFS=',' read -ra tags <<< "${TAGS}"

  #         for tag in "${tags[@]}"
  #         do
  #             docker run \
  #               --env DOCKER_CONFIG=${crane_docker_config_location} \
  #               --mount "${crane_docker_config_volume_mount}" \
  #               --rm \
  #               gcr.io/go-containerregistry/crane:latest \
  #               cp ${incoming_image_with_tag} ${tag}
  #         done

  #     - name: Cleanup!
  #       if: ${{ always() }}
  #       shell: bash
  #       run: |
  #         docker volume rm ${{ env.CRANE_DOCKER_CONFIG_VOLUME }}
