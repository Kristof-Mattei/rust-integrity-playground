name: Promote container

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

# Controls when the workflow will run
on:
  # Triggers the workflow pushes to main, which by control in GitHub should only be PR merges
  pull_request:
    branches: [ main ]
    types: [ closed ]
  push:
    branches: [ main ] # debug
    tags:
      - "v**"

  # I don't think we need this
  # workflow_dispatch:

jobs:
  collect-previous-tag:
    name: Collect previous tag
    runs-on: ubuntu-latest
    steps:
      - name: Set up Crane volume and define env variables
        shell: bash
        run: |

          CRANE_DOCKER_CONFIG_VOLUME="crane_docker_config"
          docker volume create ${CRANE_DOCKER_CONFIG_VOLUME};

          # for security purposes let's create a volume for .docker in crane
          CRANE_DOCKER_CONFIG_LOCATION="/${CRANE_DOCKER_CONFIG_VOLUME}"

          # generalize the mount config
          CRANE_DOCKER_CONFIG_VOLUME_MOUNT="type=volume,src=${CRANE_DOCKER_CONFIG_VOLUME},dst=${CRANE_DOCKER_CONFIG_LOCATION}"

          echo "CRANE_DOCKER_CONFIG_VOLUME=${CRANE_DOCKER_CONFIG_VOLUME}" >> ${GITHUB_ENV}
          echo "CRANE_DOCKER_CONFIG_LOCATION=${CRANE_DOCKER_CONFIG_LOCATION}" >> ${GITHUB_ENV}
          echo "CRANE_DOCKER_CONFIG_VOLUME_MOUNT=${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" >> ${GITHUB_ENV}

          # prepare the volume so that crane can write to is
          # note that the ${} passed in via sh are rendered before we run the container
          # so it just gets an actual string
          docker run \
            --mount "${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" \
            --rm \
            alpine:latest \
            sh -c "chmod 700 ${CRANE_DOCKER_CONFIG_LOCATION} && chown 65532:65532 ${CRANE_DOCKER_CONFIG_LOCATION}"

      - name: Set full image name
        shell: bash
        run: |

          echo "FULL_IMAGE_NAME=${REGISTRY,,}/${IMAGE_NAME,,}" >> ${GITHUB_ENV}

      - name: Crane login
        shell: bash
        run: |

          docker run \
            --env DOCKER_CONFIG=${CRANE_DOCKER_CONFIG_LOCATION} \
            --mount "${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" \
            --rm \
            gcr.io/go-containerregistry/crane:latest \
            auth login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Find all tags for current "Add or retag the Docker container."
        shell: bash
        id: tags
        run: |

          existing_tags=$(
            docker run \
              --env DOCKER_CONFIG=${CRANE_DOCKER_CONFIG_LOCATION} \
              --mount "${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" \
              --rm \
              gcr.io/go-containerregistry/crane:latest \
              ls ${FULL_IMAGE_NAME}
          )

          echo "::set-output name=existing-tags::${existing_tags}"


      - name: Debug
        shell: bash
        run: |

          echo "${{ steps.tags.output.existing-tags }}"


      - name: Find out if the incoming PR has a docker image in the form of :pr-<number>
        if: ${{ github.event_name == 'pull_request' }}
        env:
          PR_TAG: "pr-${{ github.event.number }}"
        shell: bash
        run: |

          # search for the tag
          echo "${{ steps.tags.output.existing-tags }}" | grep ${PR_TAG}

          if [ $? -eq 0 ]
          then
            echo "Incoming PR produced a Docker image"
            echo "OLD_TAG=${PR_TAG}" >> ${GITHUB_ENV}
          fi

      - name: Find SHA suffix for retagging
        if: ${{ env.OLD_TAG == '' }}
        env:
          SHA: ${{ github.event_name == 'pull_request' && github.pull_request.base.sha || github.sha }}
        shell: bash
        run: |

          tag_prefix="sha-${SHA}-"

          old_tag=$(echo "${{ steps.tags.output.existing-tags }}" | grep --only-matching ${tag_prefix}-.*)

          echo "OLD_TAG=${old_tag}" >> ${GITHUB_ENV}

      - name: Dump
        shell: bash
        run: |
          echo ${{ github }}

      # - name: Actually re-tag the container
      #   env:
      #     NEW_TAG: ${{ github.event_name == 'pull_request' && 'pr-${{ github.event.number }}' || github.sha }}
      #   shell: bash
      #   run: |

      #     docker run \
      #       --env DOCKER_CONFIG=${CRANE_DOCKER_CONFIG_LOCATION} \
      #       --mount "${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" \
      #       --rm \
      #       gcr.io/go-containerregistry/crane:latest \
      #       tag "${FULL_IMAGE_NAME}:${OLD_TAG}" ${NEW_TAG}

      # - name: Cleanup!
      #   if: ${{ always() }}
      #   shell: bash
      #   run: |
      #     docker volume rm ${{ env.CRANE_DOCKER_CONFIG_VOLUME }}


