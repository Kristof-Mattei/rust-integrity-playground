name: Tag containers

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

# Controls when the workflow will run
on:
  # Triggers the workflow pushes to main, which by control in GitHub should only be PR merges
  pull_request:
    branches: [main]
    types: [closed]
  push:
    tags:
      - "v**"

  # I don't think we need this
  # workflow_dispatch:

permissions:
  packages: write

jobs:
  should-workflow-run:
    if: ${{ github.event.pull_request.merged == true }}
    # not ready to give up on tagging the builds in a certain way
    # if: ${{ github.ref_type == 'tag' || github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "I'm a giraffe!"

  retag-containers:
    name: Retag the containers
    runs-on: ubuntu-latest
    needs:
      - should-workflow-run
    steps:
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Crane volume and define env variables
        shell: bash
        run: |

          # for security purposes let's create a volume for .docker in crane
          CRANE_DOCKER_CONFIG_VOLUME="crane_docker_config"

          CRANE_DOCKER_CONFIG_LOCATION="/.docker_config"

          # this volume will hold the the docker.json
          docker volume create ${CRANE_DOCKER_CONFIG_VOLUME};

          # generalize the mount config, which we'll export later too
          CRANE_DOCKER_CONFIG_VOLUME_MOUNT="type=volume,src=${CRANE_DOCKER_CONFIG_VOLUME},dst=${CRANE_DOCKER_CONFIG_LOCATION}"

          # prepare the volume so that crane can write to is
          # note that the ${} passed in via sh are rendered before we run the container
          # so it just gets an actual string
          docker run \
            --mount "${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" \
            --rm \
            alpine:latest \
            sh -c "chmod 700 ${CRANE_DOCKER_CONFIG_LOCATION} && chown 65532:65532 ${CRANE_DOCKER_CONFIG_LOCATION}"

          # export the variables for future operations
          echo "CRANE_DOCKER_CONFIG_VOLUME=${CRANE_DOCKER_CONFIG_VOLUME}" >> ${GITHUB_ENV}
          echo "CRANE_DOCKER_CONFIG_LOCATION=${CRANE_DOCKER_CONFIG_LOCATION}" >> ${GITHUB_ENV}
          echo "CRANE_DOCKER_CONFIG_VOLUME_MOUNT=${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" >> ${GITHUB_ENV}

      - name: Set full image name
        shell: bash
        run: |

          echo "FULL_IMAGE_NAME=${REGISTRY,,}/${IMAGE_NAME,,}" >> ${GITHUB_ENV}

      - name: Crane login
        shell: bash
        run: |

          docker run \
            --env DOCKER_CONFIG=${CRANE_DOCKER_CONFIG_LOCATION} \
            --mount "${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" \
            --rm \
            gcr.io/go-containerregistry/crane:latest \
            auth login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Find all tags for ${{ env.FULL_IMAGE_NAME }}
        shell: bash
        run: |

          docker run \
            --env DOCKER_CONFIG=${CRANE_DOCKER_CONFIG_LOCATION} \
            --mount "${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" \
            --rm \
            gcr.io/go-containerregistry/crane:latest \
            ls ${FULL_IMAGE_NAME} >> existing_tags

          cat existing_tags

      - name: Check if the incoming PR has a Docker container, which will be our old tag
        if: ${{ github.event_name == 'pull_request' }}
        env:
          PR_TAG: "pr-${{ github.event.number }}-latest"
        shell: bash
        run: |
          # search for the tag, there can only be zero or one match
          # we need the || true because otherwise grep returns exit code 1 and github actions then dies
          pr_tag_found=$(cat existing_tags | grep -c "^${PR_TAG}\$") || true

          if [ $pr_tag_found -eq 1 ]
          then
            echo "Incoming PR produced a Docker image"
            echo "OLD_TAG=${PR_TAG}" >> ${GITHUB_ENV}
          fi

      - name: In all other circumstances, the old tag either from the current sha (we're tagging) or the base sha (we're merging in a PR that did not produce a docker contaienr)
        if: ${{ env.OLD_TAG == '' }}
        env:
          # forgive me programming gods
          SHA: ${{ fromJSON(format('["{0}", "{1}"]', github.sha, github.event.pull_request.base.sha))[github.event_name == 'pull_request'] }}
        shell: bash
        run: |
          old_tag=$(cat existing_tags | grep "^sha-${SHA}-.*\$") # .* is actual or retag

          echo "OLD_TAG=${old_tag}" >> ${GITHUB_ENV}

      - name: Set the new TAGs
        id: meta
        uses: docker/metadata-action@v3
        env:
          SUFFIX: ${{ fromJSON(format('["{0}", "{1}"]', 'actual', 'retag'))[env.OLD_TAG == ''] }}
        with:
          images: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.0.') }}
            type=semver,pattern=v{{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=sha,format=long,prefix=sha-,suffix=-${{ env.SUFFIX }},enable=${{ github.event_name == 'pull_request' }}

      - name: Actually re-tag the container
        shell: bash
        run: |
          echo "${{ steps.meta.outputs.tags }}" | while read new_tag
          do
            docker run \
              --env DOCKER_CONFIG=${CRANE_DOCKER_CONFIG_LOCATION} \
              --mount "${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" \
              --rm \
              gcr.io/go-containerregistry/crane:latest \
              cp "${FULL_IMAGE_NAME}:${OLD_TAG}" ${new_tag}
          done

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: npm ci

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Cleanup!
        if: ${{ always() }}
        shell: bash
        run: |
          docker volume rm ${{ env.CRANE_DOCKER_CONFIG_VOLUME }}
