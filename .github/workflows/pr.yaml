name: Build PR

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
  checks: write
  pull-requests: write
  issues: write
  packages: write

env:
  CARGO_TERM_COLOR: always
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # just a name, but storing it separately as we're nice people
  DOCKER_IMAGE_ARTIFACT_NAME: Docker image
  DOCKER_IMAGE_OUTPUT_LOCATION: /tmp
  DOCKER_IMAGE_TAR_LOCATION: /tmp/docker-image.tar # notice /tmp same as DOCKER_IMAGE_OUTPUT_LOCATION

concurrency:
  # each new commit to a PR runs this workflow
  # so we need to avoid a long running older one from overwriting the 'pr-<number>-latest'
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label }}"
  cancel-in-progress: true

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      # code: ${{ steps.filter.outputs.code }}
      code: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97
        with:
          submodules: true

      - name: Check if we actually made changes
        uses: dorny/paths-filter@b2feaf19c27470162a626bd6fa8438ae5b263721
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: .github/file-filters.yml

  cargo-build:
    name: Cargo build
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      (needs.changes.outputs.code == 'true')

    steps:
      - uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97
        with:
          submodules: true

      - name: Set up toolchain
        uses: actions-rs/toolchain@b2417cde72dcf67f306c0ae8e0828a81bf0b189f
        with:
          profile: minimal
          toolchain: 1.56.0
          override: true

      - name: Cache dependencies
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cargobuild
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

      - name: Build
        uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b
        with:
          command: build
          args: --verbose

  cargo-fmt:
    name: Check formatting
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      (needs.changes.outputs.code == 'true')
    steps:
      - uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97
        with:
          submodules: true

      - name: Set up toolchain
        uses: actions-rs/toolchain@b2417cde72dcf67f306c0ae8e0828a81bf0b189f
        with:
          profile: minimal
          toolchain: 1.56.0
          override: true
          components: rustfmt

      - name: Cache dependencies
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cargofmt
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

      - name: Fmt
        uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b
        with:
          command: fmt
          args: --all -- --check

  cargo-test-and-report:
    name: Cargo test and report
    env:
      PROJECT_NAME_UNDERSCORE: rust_integrity_playground
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests -Zprofile
      RUSTDOCFLAGS: "-Cpanic=abort"
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      (needs.changes.outputs.code == 'true')
    steps:
      - uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97
        with:
          submodules: true

      - name: Set up toolchain
        uses: actions-rs/toolchain@b2417cde72dcf67f306c0ae8e0828a81bf0b189f
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Cache dependencies
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cargotest
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

      - name: Set up NPM to install package to set up crane toolchain
        shell: bash
        run: |
          npm install @actions/tool-cache

      - name: Download crane tar, extract, and add folder to path.
        uses: actions/github-script@441359b1a30438de65712c2fbca0abe4816fa667
        with:
          script: |
            const tc = require("@actions/tool-cache");
            const urlToGrcovTar = "https://github.com/mozilla/grcov/releases/download/v0.8.2/grcov-linux-x86_64.tar.bz2";
            const grcovTarPath = await tc.downloadTool(urlToGrcovTar);
            const craneExtractedFolder = await tc.extractTar(grcovTarPath, null, ["--extract"]); // no z, or gzip, as it's a bz2
            core.addPath(craneExtractedFolder);

      - name: Generate test result and coverage report
        run: |
          cargo install cargo2junit;
          cargo test ${CARGO_OPTIONS} -- -Z unstable-options --format json | cargo2junit > results.xml;
          zip -0 ccov.zip `find . \( -name "${PROJECT_NAME_UNDERSCORE}*.gc*" \) -print`;
          grcov ccov.zip -s . -t lcov --llvm --ignore-not-existing --ignore "/*" --ignore "tests/*" -o lcov.info;

      - name: Upload test results
        if: ${{ always() }}
        uses: EnricoMi/publish-unit-test-result-action@823e195704e47d447e7e8cc801f02ab5d7ba2541
        with:
          check_name: Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: ./results.xml

      - name: Upload to CodeCov
        if: ${{ always() }}
        uses: codecov/codecov-action@f32b3a3741e1053eb607407145bc9619351dc93b
        with:
          # # required for private repositories:
          # token: ${{ secrets.CODECOV_TOKEN }}
          files: ./lcov.info
          fail_ci_if_error: true

  cargo-clippy-and-report:
    name: Run Clippy
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      (needs.changes.outputs.code == 'true')
    steps:
      - uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97
        with:
          submodules: true

      - name: Set up toolchain
        uses: actions-rs/toolchain@b2417cde72dcf67f306c0ae8e0828a81bf0b189f
        with:
          profile: minimal
          toolchain: 1.56.0
          override: true
          components: clippy

      - name: Cache dependencies
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cargoclippy
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

      - name: Clippy
        uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b
        with:
          command: clippy
          args: --all-targets --all-features -- -D warnings

      - uses: actions-rs/clippy-check@b5b5f21f4797c02da247df37026fcd0a5024aa4d
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features -- -D warnings
          name: Clippy report

  docker-build:
    name: Build docker container and store in artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25

      # TODO validate no changes between github.event.pull_request.head.sha and the actual current sha (representing the hypothetical merge)

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@548e2346a9987b56d8a4104fe776321ff8e23440
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr,suffix=-latest
            type=raw,value=pr-${{ github.event.pull_request.base.sha }}-${{ github.event.pull_request.head.sha }}
          labels: |
            org.opencontainers.image.version=pr-${{ github.event.number }}
            org.opencontainers.image.source=${{ github.event.pull_request.html_url }}

      - name: Cache Docker layers
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        env:
          CACHE_NAME: docker-cache-dependencies
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

      - name: Build Docker image
        uses: docker/build-push-action@a66e35b9cbcf4ad0ea91ffcaf7bbad63ad9e0229
        with:
          context: .
          # this container is THE PR's artifact, and we will re-tag it
          # once the PR has been accepted
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          outputs: type=docker,dest=${{ env.DOCKER_IMAGE_TAR_LOCATION }}

        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Upload artifact
        uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074
        with:
          name: ${{ env.DOCKER_IMAGE_ARTIFACT_NAME }}
          path: ${{ env.DOCKER_IMAGE_TAR_LOCATION }}

  publish-docker-container:
    name: Pulls docker container from artifacts and publishes it
    runs-on: ubuntu-latest
    needs:
      - cargo-build
      - cargo-fmt
      - cargo-test-and-report
      - cargo-clippy-and-report
      - docker-build
    if: ${{ (github.repository == 'kristof-mattei/rust-integrity-playground') && (github.event_name == 'pull_request')  }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25

      - name: Download artifact
        uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60
        with:
          name: ${{ env.DOCKER_IMAGE_ARTIFACT_NAME }}
          path: ${{ env.DOCKER_IMAGE_OUTPUT_LOCATION }}

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load image from artifact
        run: |
          docker load --input ${{ env.DOCKER_IMAGE_TAR_LOCATION }}
          docker image ls -a
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --all-tags
