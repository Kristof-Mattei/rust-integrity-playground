name: Semantic tags

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions:
  packages: write

jobs:
  retag-containers:
    name: Retag the containers
    runs-on: ubuntu-latest
    steps:
      - name: Set up Crane volume and define env variables
        shell: bash
        run: |

          # for security purposes let's create a volume for .docker in crane
          CRANE_DOCKER_CONFIG_VOLUME="crane_docker_config"

          CRANE_DOCKER_CONFIG_LOCATION="/.docker_config"

          # this volume will hold the the docker.json
          docker volume create ${CRANE_DOCKER_CONFIG_VOLUME};

          # generalize the mount config, which we'll export later too
          CRANE_DOCKER_CONFIG_VOLUME_MOUNT="type=volume,src=${CRANE_DOCKER_CONFIG_VOLUME},dst=${CRANE_DOCKER_CONFIG_LOCATION}"

          # prepare the volume so that crane can write to is
          # note that the ${} passed in via sh are rendered before we run the container
          # so it just gets an actual string
          docker run \
            --mount "${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" \
            --rm \
            alpine:latest \
            sh -c "chmod 700 ${CRANE_DOCKER_CONFIG_LOCATION} && chown 65532:65532 ${CRANE_DOCKER_CONFIG_LOCATION}"

          # export the variables for future operations
          echo "CRANE_DOCKER_CONFIG_VOLUME=${CRANE_DOCKER_CONFIG_VOLUME}" >> ${GITHUB_ENV}
          echo "CRANE_DOCKER_CONFIG_LOCATION=${CRANE_DOCKER_CONFIG_LOCATION}" >> ${GITHUB_ENV}
          echo "CRANE_DOCKER_CONFIG_VOLUME_MOUNT=${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" >> ${GITHUB_ENV}

      - name: Set full image name
        shell: bash
        run: |

          echo "FULL_IMAGE_NAME=${REGISTRY,,}/${IMAGE_NAME,,}" >> ${GITHUB_ENV}

      - name: Crane login
        shell: bash
        run: |

          docker run \
            --env DOCKER_CONFIG=${CRANE_DOCKER_CONFIG_LOCATION} \
            --mount "${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" \
            --rm \
            gcr.io/go-containerregistry/crane:latest \
            auth login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Find all tags for ${{ env.FULL_IMAGE_NAME }}
        shell: bash
        run: |

          docker run \
            --env DOCKER_CONFIG=${CRANE_DOCKER_CONFIG_LOCATION} \
            --mount "${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" \
            --rm \
            gcr.io/go-containerregistry/crane:latest \
            ls ${FULL_IMAGE_NAME} >> existing_tags

          echo "These are the existing tags on ${FULL_IMAGE_NAME}:"
          cat existing_tags

      - name: Check if the incoming PR has a Docker container, which will be our old tag
        shell: bash
        run: |
          old_tag=$(cat existing_tags | grep "^sha-${{ github.sha }}-.*\$") # .* is actual or retag

          echo "OLD_TAG=${old_tag}" >> ${GITHUB_ENV}

      - name: Set the new TAGs
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.0.') }}
            type=semver,pattern=v{{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}

      - name: Actually re-tag the container
        shell: bash
        run: |
          echo "${{ steps.meta.outputs.tags }}" | while read new_tag
          do
            docker run \
              --env DOCKER_CONFIG=${CRANE_DOCKER_CONFIG_LOCATION} \
              --mount "${CRANE_DOCKER_CONFIG_VOLUME_MOUNT}" \
              --rm \
              gcr.io/go-containerregistry/crane:latest \
              cp "${FULL_IMAGE_NAME}:${OLD_TAG}" ${new_tag}
          done

      - name: Cleanup!
        if: ${{ always() }}
        shell: bash
        run: |
          docker volume rm ${{ env.CRANE_DOCKER_CONFIG_VOLUME }}
